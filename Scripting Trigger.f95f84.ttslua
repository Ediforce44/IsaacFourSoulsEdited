--- Written by Ediforce44
owner_color = "Green"
INDEX_ZERO_POSITION = Vector(-33.20, 1.5, 6.21)
INDEX_OFFSET = 3.24
INDEX_THRESHOLDS = {    --INDEX 1
                        7.8,
                        --INDEX 2
                        11.1,
                        --INDEX 3
                        14.3
                        --INDEX 4
                    }
INDEX_BLOCKED = {false, false, false, false}

BACK_SCALING = {0.225, 1, 0.078}

autoRewarding = true
rewardingButtonLocked = true
REWARDING_BUTTON_OFFSET = {x=-0.855, y=-0.4, z=-0.415}
REWARDING_BUTTON_COLOR = {
    ON  = Global.getTable("REAL_PLAYER_COLOR_RGB")[owner_color],
    OFF = {0, 0, 0}
}
REWARDING_BUTTON_TEXT = {
    ON = "Auto Rewarding:\n>>> ON <<<",
    OFF = "Auto Rewarding:\n>>> OFF <<<"
}

local function getTimerParameters(blockedIndex)
    local timerParameters = {
        ["identifier"] = "SoulIndexTimer" .. self.guid .. tostring(blockedIndex),
        ["function_name"] = "resetBlockedIndex",
        ["parameters"] = {index = blockedIndex},
        ["delay"] = 2,
    }
    return timerParameters
end

function resetBlockedIndex(params)
    INDEX_BLOCKED[params.index] = false
end

local function getIndexFromZCoord(zCoord)
    if zCoord <= INDEX_THRESHOLDS[2] then
        if zCoord < INDEX_THRESHOLDS[1] then
            return 1
        else
            return 2
        end
    else
        if zCoord > INDEX_THRESHOLDS[3] then
            return 4
        else
            return 3
        end
    end
end

local function getTooltipStringRB()
    return "      Auto. Rewarding Button\n------------" .. (rewardingButtonLocked and " (Locked) " or "-----------")
            .. "------------\n\n - Right-Click: (Un-)lock Button\n - Left-Click: Switch mode\n"
end

function onLoad()
    self.createButton({
        click_function = "click_function_SwitchRewardingMode",
        function_owner = self,
        label          = autoRewarding and REWARDING_BUTTON_TEXT.ON or REWARDING_BUTTON_TEXT.OFF,
        position       = REWARDING_BUTTON_OFFSET,
        scale          = BACK_SCALING,
        width          = 1400,
        height         = 420,
        font_size      = 180,
        color          = autoRewarding and REWARDING_BUTTON_COLOR.ON or REWARDING_BUTTON_COLOR.OFF,
        font_color     = {1, 1, 1},
        tooltip        = getTooltipStringRB()
    })
end

function click_function_SwitchRewardingMode(_, color, alt_click)
    if Global.call("isPlayerAuthorized", {playerColor = color}) then
        -- Locks and unlocks rewarding button
        if alt_click then
            rewardingButtonLocked = not rewardingButtonLocked
            self.editButton({index = 0, tooltip = getTooltipStringRB()})
            return
        elseif rewardingButtonLocked then
            return
        end
        -- Switch rewarding mode
        autoRewarding = not autoRewarding
        local msg = "Your Auto Rewarding has been "
        if autoRewarding then
            self.editButton({index = 0, label = REWARDING_BUTTON_TEXT.ON, color = REWARDING_BUTTON_COLOR.ON})
            msg = msg .. "turned ON !!!"
        else
            self.editButton({index = 0, label = REWARDING_BUTTON_TEXT.OFF, color = REWARDING_BUTTON_COLOR.OFF})
            msg = msg .."turned OFF !!!"
        end
        print(Global.getTable("REAL_PLAYER_COLOR")[owner_color] .. owner_color
                .. "s[-] auto rewarding mode has changed.")
        broadcastToColor(msg, owner_color)
    end
end

-- You have two seconds to place a object on the returned position.
-- Otherwise the position will no longer be reserved.
function nextFreeSoulPosition()         --EbyE44
    local indexTable = {}
    for i = 1, 4 do
        indexTable[i] = not INDEX_BLOCKED[i]
    end
    for _ , obj in pairs(self.getObjects()) do
        if obj.getVar("soul") ~= nil then
            indexTable[getIndexFromZCoord(obj.getPosition().z)] = false
        end
    end
    for index = 1, 4 do
        if indexTable[index] then
            INDEX_BLOCKED[index] = true
            Timer.create(getTimerParameters(index))
            return INDEX_ZERO_POSITION + Vector(0, 0, (index - 1) * INDEX_OFFSET)
        end
    end
    printToAll("[fdd835][WARNING][-] Can't find a free position in " .. Global.getTable("REAL_PLAYER_COLOR")[owner_color]
                .. "Soul Zone.")
    return nil
end

function placeCardInSoulZone(params)
    if params.card == nil or params.card.tag ~= "Card" then
        printToAll("[fdd835][WARNING][-] Wrong parameters in " .. Global.getTable("REAL_PLAYER_COLOR")[owner_color]
                    .. "Soul Zone[-]" .. " function 'placeCardInSoulZone()'. Maybe parameter isn't a card.")
    else
        local position = nextFreeSoulPosition()
        if position ~= nil then
            Wait.frames(
                function ()
                local soulAmount = "zero souls"
                    if params.card.getVar("soul") == 1 then
                        soulAmount = "one soul"
                    elseif params.card.getVar("soul") == 2 then
                        soulAmount = "two souls"
                    end
                    broadcastToAll(Global.call("getPlayerString", {playerColor = owner_color})
                                    .. Global.getTable("PRINT_COLOR_SPECIAL").SOUL .. " earned " .. soulAmount
                                    .. ". Hurray !!!")
                end
            , 1)
            params.card.setRotationSmooth({x=0, y=90, z=0}, false)
            params.card.setPositionSmooth(position, false)
            return true
        end
    end
    return false
end