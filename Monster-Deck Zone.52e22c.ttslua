--- Written by Ediforce44
MONSTER_ZONE_GUIDS = Global.getTable("ZONE_GUID_MONSTER")
CHOOSE_BUTTON_STATES = {ATTACK = "Attack", CHOOSE = "Cancel"}
CHOOSE_BUTTON_INDEX = nil

ATTACK_BUTTON_STATES = {
    INACTIVE    = "Inactive",
    ATTACK      = "Attack",
    CHOOSE      = "This Zone",
    ATTACKING   = "Cancel",
    DIED        = "Finish Him"
}

local function getChooseButton()
    return self.getButtons()[CHOOSE_BUTTON_INDEX + 1]
end

local function getDoubleAltClickParameters(zone)
    DOUBLE_CLICK_PARAMETERS = {
        ["identifier"] = "AltClickTimer" .. zone.guid,
        ["function_owner"] = zone,
        ["function_name"] = "resetAltClickCounter",
        ["delay"] = Global.getVar("CLICK_DELAY")
    }
    return DOUBLE_CLICK_PARAMETERS
end

local function printAttackPhrase(monsterName)
    local phrase = nil
    if monsterName == "" then
        printToAll("[fdd835][WARNING][-] There is no active monster to attack. The attribute 'NAME' is empty.")
    else
        phrase = Global.call("getActivePlayerString")
        phrase = phrase .. " attacks " .. Global.getTable("PRINT_COLOR_SPECIAL").MONSTER .. monsterName .. "[-] !!!"
        broadcastToAll(phrase)
    end
    return phrase
end

local function activateChooseButton()
    if CHOOSE_BUTTON_INDEX == nil then
        CHOOSE_BUTTON_INDEX = 0
        self.createButton({
            click_function = "click_function_ChooseButton",
            function_owner = self,
            label          = "Attack",
            position       = {0, -0.5, 3},
            width          = 1000,
            height         = 300,
            font_size      = 200,
            color          = {0.2, 0.157, 0.325},
            font_color     = {1, 1, 1}
        })
    end
end

local function deactivateChooseButton()
    if CHOOSE_BUTTON_INDEX then
        self.removeButton(CHOOSE_BUTTON_INDEX)
        CHOOSE_BUTTON_INDEX = nil
    end
end

------------------------------------------------------------------------------------------------------------------------
--------------------------------------------- Button functions ---------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
local function resetAttackButton(zone)
    local clickCounter = zone.getVar("altClickCounter")
    if clickCounter > 0 then
        zone.call("deactivateZone")
    else
        zone.setVar("altClickCounter", clickCounter + 1)
        Timer.create(getDoubleAltClickParameters(zone))
    end
end

local function deactivateAllOtherMonsterButtons(zone)
    for _ , guid in pairs(Global.getTable("ZONE_GUID_MONSTER")) do
        local monsterZone = getObjectFromGUID(guid)
        if monsterZone.getGUID() ~= zone.guid then
            monsterZone.call("deactivateAttackButton")
        end
    end
    deactivateChooseButton()
end

local function activateAllMonsterButtons()
    for _ , guid in pairs(Global.getTable("ZONE_GUID_MONSTER")) do
        getObjectFromGUID(guid).call("activateAttackButton")
    end
    activateChooseButton()
end
------------------------------------------------------------------------------------------------------------------------

function onLoad()
    -- Attack button
    activateChooseButton()
end

function placeNewMonsterCard(params)
    if params.zone == nil then
        printToAll("[fdd835][WARNING][-] Wrong parameters in 'monster deck' function 'placeNewMonsterCard()'.")
    end
    local newMonsterCard = Global.call("getCardFromDeck", {deck = Global.call("getMonsterDeck")})
    if newMonsterCard ~= nil then
        newMonsterCard.flip()
        newMonsterCard.setPositionSmooth({params.zone.getPosition().x, 5, params.zone.getPosition().z}, false)
        if params.isTargetOfAttack then Wait.frames(function () printAttackPhrase(newMonsterCard.getName()) end, 1) end
        return true
    end
    return false
end

function changeZoneState(params)
    local zone = params.zone
    local newState = params.newState
    if zone == nil or newState == nil then
        return
    end
    if newState == ATTACK_BUTTON_STATES.INACTIVE then
        activateAllMonsterButtons()
        if zone.getVar("active") then
            zone.call("deactivateZone")
        end
    elseif newState == ATTACK_BUTTON_STATES.ATTACK then
        activateAllMonsterButtons()
        if not zone.getVar("active") then
            zone.call("activateZone")
        else
            zone.editButton({index = zone.getVar("ATTACK_BUTTON_INDEX"), label = ATTACK_BUTTON_STATES.ATTACK})
        end
    elseif newState == ATTACK_BUTTON_STATES.CHOOSE then
        if zone.getVar("active") then   --change button state
            --zone.call("activateAttackButton")
            zone.editButton({index = zone.getVar("ATTACK_BUTTON_INDEX"), label = ATTACK_BUTTON_STATES.CHOOSE})
        else    --deactivate buttons for inactive zones
            zone.call("deactivateAttackButton")
        end
    elseif newState == ATTACK_BUTTON_STATES.ATTACKING then
        if zone.getVar("active") then
            zone.call("activateAttackButton")
            zone.editButton({index = zone.getVar("ATTACK_BUTTON_INDEX") , label = ATTACK_BUTTON_STATES.ATTACKING})
            deactivateAllOtherMonsterButtons(zone)
        end
    elseif newState == ATTACK_BUTTON_STATES.DIED then
        if zone.getVar("active") then
            zone.call("activateAttackButton")
            zone.editButton({index = zone.getVar("ATTACK_BUTTON_INDEX") , label = ATTACK_BUTTON_STATES.DIED})
            deactivateAllOtherMonsterButtons(zone)
        end
    end
end

--Thank you Bone White in discord for this <3       --Edited by Ediforce44
function findAttrsInScript(scriptString)
    local attrs = {}
    local hpPattern = "([Hh][Pp]%s?=%s?%d+)"
    local atkPattern = "[Dd][Ii][Cc][Ee]%s?=%s?%d+"
    local dmgPattern = "[Aa][Tt][Kk]%s?=%s?%d+"
    local attrPatterns = {HP = hpPattern, ATK = atkPattern, DMG = dmgPattern}
    for line in string.gmatch(scriptString,"[^\r\n]+") do -- for each line in the script
        for attrName , pattern in pairs(attrPatterns) do
            local attrString = string.match(line, pattern)
            if attrString ~= nil then
                attrs[tostring(attrName)] = tonumber(string.match(attrString, "%d+"))
            end
        end
    end
    return attrs
end

--Thank you Bone White in discord for this <3       --Edited by Ediforce44
function findRewardsInScript(scriptString)
    local rewards = {}
    local varName = "rewards"
    for line in string.gmatch(scriptString,"[^\r\n]+") do -- for each line in the script
        if string.sub(line,1,#varName) == varName then -- if the beginning of the line matches var
            local tableString = string.match(line,"{.*}",#varName)
            if tableString ~= nil then
                local entryCents = string.match(tableString, "cents = %d+")
                local entryLoot = string.match(tableString, "loot = %d+")
                local entryTreasure = string.match(tableString, "treasures = %d+")
                local entrySouls = string.match(tableString, "souls = %d+")
                rewards.CENTS = tonumber(string.match(entryCents, "%d+"))
                rewards.LOOT = tonumber(string.match(entryLoot, "%d+"))
                rewards.TREASURES = tonumber(string.match(entryTreasure, "%d+"))
                rewards.SOULS = tonumber(string.match(entrySouls, "%d+"))
                return rewards
            end
        end
    end
    return rewards
end

--TODO: add reward table extraction (vielleicht auch erst sobald hp counter auf null geht)
function onObjectEnterScriptingZone(zone, object)
    for i, guid in pairs(MONSTER_ZONE_GUIDS) do
        if guid == zone.getGUID() then
            local newAttributes = {}
            if object.tag == "Deck" then
                local containedObjects = object.getData().ContainedObjects
                local firstCard = containedObjects[#containedObjects]
                local script = firstCard["LuaScript"]
                newAttributes = findAttrsInScript(script)
                if newAttributes == {} then
                    newAttributes.HP = object.getVar("hp") or 0
                end
                newAttributes.NAME = firstCard["Nickname"]
            elseif object.tag == "Card" then
                newAttributes.NAME = object.getName()
                newAttributes.HP = object.getVar("hp") or 0
                newAttributes.ATK = object.getVar("dice")
                newAttributes.DMG = object.getVar("atk")
            end
            zone.call("updateAttributes", newAttributes)
        end
    end
end

--TODO: reward table extraction
function onObjectLeaveScriptingZone(zone, object)
    for i, guid in pairs(MONSTER_ZONE_GUIDS) do
        if guid == zone.getGUID() then
            local newAttributes = {}
            local firstObjectInZone = zone.getObjects()[1]
            if firstObjectInZone == nil then
                newAttributes = {NAME = "", HP = 0}
            elseif firstObjectInZone.tag == "Card" then
                newAttributes.NAME = firstObjectInZone.getName()
                newAttributes.HP = firstObjectInZone.getVar("hp") or 0
                newAttributes.ATK = firstObjectInZone.getVar("dice")
                newAttributes.DMG = firstObjectInZone.getVar("atk")
            elseif firstObjectInZone.tag == "Deck" then
                for _ , card in pairs(firstObjectInZone.getObjects()) do
                    if card.guid == object.getGUID() then
                        return
                    end
                end
                local containedObjects = firstObjectInZone.getObjects()
                local firstCard = containedObjects[#containedObjects]
                local script = firstCard.lua_script
                newAttributes = findAttrsInScript(script)
                if newAttributes == {} then
                    newAttributes.HP = object.getVar("hp") or 0
                end
                newAttributes.NAME = firstCard["Nickname"]
            end
            zone.call("updateAttributes", newAttributes)
        end
    end
end

function click_function_ChooseButton(_, color, alt_click)
    if Global.getVar("activePlayerColor") == color or Player[color].admin then
        local chooseButton = getChooseButton()
        if chooseButton.label == CHOOSE_BUTTON_STATES.ATTACK then
            self.editButton({index = CHOOSE_BUTTON_INDEX, label = CHOOSE_BUTTON_STATES.CHOOSE})
            for _ , guid in pairs(Global.getTable("ZONE_GUID_MONSTER")) do
                changeZoneState({zone = getObjectFromGUID(guid), newState = ATTACK_BUTTON_STATES.CHOOSE})
            end
        elseif chooseButton.label == CHOOSE_BUTTON_STATES.CHOOSE then
            self.editButton({index = CHOOSE_BUTTON_INDEX, label = CHOOSE_BUTTON_STATES.ATTACK})
            activateAllMonsterButtons()
            for _ , guid in pairs(Global.getTable("ZONE_GUID_MONSTER")) do
                local zone = getObjectFromGUID(guid)
                if zone.getVar("active") then
                    zone.editButton({index = zone.getVar("ATTACK_BUTTON_INDEX"), label = ATTACK_BUTTON_STATES.ATTACK})
                end
            end
        else
            printToAll("[fdd835][WARNING][-] Unknown monster button state: " .. tostring(attackButton.label) .. ".")
        end
    end
end

function click_function_AttackButton(zone, color, alt_click)
    if Global.getVar("activePlayerColor") == color or Player[color].admin then
        if alt_click then
            resetAttackButton(zone)
            return
        end
        local attackButton = zone.getButtons()[zone.getVar("ATTACK_BUTTON_INDEX") + 1]
        if attackButton.label == ATTACK_BUTTON_STATES.INACTIVE then
            zone.call("activateZone")
        elseif attackButton.label == ATTACK_BUTTON_STATES.ATTACK then
            if printAttackPhrase(zone.getTable("active_monster_attrs").NAME) then
                changeZoneState({zone = zone, newState = ATTACK_BUTTON_STATES.ATTACKING})
            end
        elseif attackButton.label == ATTACK_BUTTON_STATES.CHOOSE then
            if placeNewMonsterCard({zone = zone, isTargetOfAttack = true}) then
                changeZoneState({zone = zone, newState = ATTACK_BUTTON_STATES.ATTACKING})
            end
        elseif attackButton.label == ATTACK_BUTTON_STATES.ATTACKING then
            local monsterName = zone.getTable("active_monster_attrs").NAME
            if monsterName == "" then
                printToAll("[fdd835][WARNING][-] There is no active monster to attack. The attribute 'NAME' is empty.")
            else
                broadcastToAll(Global.call("getActivePlayerString") .. " cancels the Attack on "
                                .. Global.getTable("PRINT_COLOR_SPECIAL").MONSTER .. monsterName .. "[-] !!!")
            end
            changeZoneState({zone = zone, newState = ATTACK_BUTTON_STATES.ATTACK})
        elseif attackButton.label == ATTACK_BUTTON_STATES.DIED then
            zone.call("finishMonster")
            changeZoneState({zone = zone, newState = ATTACK_BUTTON_STATES.ATTACK})
        else
            printToAll("[fdd835][WARNING][-] Unknown monster button state: " .. tostring(attackButton.label) .. ".")
        end
    end
end