------------------------------------------------------------------------------------------------------------------------
--------------------------------------------- Edited by Ediforce44 -----------------------------------------------------
------------------------------------------------ local functions -------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
local function getDeckOrCard(zoneGUID)
    local zone = getObjectFromGUID(zoneGUID)
    if zone == nil then
        printToAll("[fdd835][WARNING][-] Wrong Zone. Zone with GUID '" .. zoneGUID .. "' doesn't exist.")
        return nil
    end

    for _, obj in pairs(zone.getObjects()) do
      if obj.tag == "Deck" or obj.tag == "Card" then
          return obj
      end
    end
    --Can't find a Deck or Card in the zone
    local zoneName = ""
    for name, guid in pairs(ZONE_GUID_DECK) do
        if guid == zoneGUID then
            zoneName = tostring(name)
            goto printError
        end
    end
    zoneName = "'Zone is not a Deck-Zone'"
    ::printError::
    printToAll("[fdd835][WARNING][-] Can't find the deck or card in zone: " .. zoneName .. ".")
    return nil
end
------------------------------------------------------------------------------------------------------------------------

function onLoad()
    broadcastToAll("The Binding of Isaac: Four Souls - FULL loaded.", {1,1,1})
end

-- Auto monster HP reset
FIRST_HEARTS_GUID = {
  -- Blue player hearts
  "78f8e7",
   -- Red player hearts
  "bcabf3",
  -- Yellow player hearts
  "c02908",
  -- Green player hearts
  "12326f"
}

SECOND_HEARTS_GUID = {
  -- Blue player hearts
  "c9f7b2",
   -- Red player hearts
  "ca5135",
  -- Yellow player hearts
  "3f81b7",
  -- Green player hearts
  "c326f1"
}

function onPlayerTurn(player, previous_player)

    local lootdeck = getDeckOrCard(ZONE_GUID_DECK.LOOT)

    if previous_player == nil then
        print(getPlayerString({playerColor = player.color}) .. " is going first. It's now their turn.")
        lootdeck.deal(1, Turns.turn_color)
        previous_player = player
        previous_player.color = player.color
    else
        print(getPlayerString({playerColor = previous_player.color}) .. "'s turn is over. It's now "
                .. getPlayerString({playerColor = player.color}) .. "'s turn.")
        lootdeck.deal(1, Turns.turn_color)
    end

    -- Monster HP

    if (getObjectFromGUID("9bb226").getVar("val") == 0) then
        getObjectFromGUID("9bb226").call("reset")
    end
    getObjectFromGUID("a75691").call("reset")
    getObjectFromGUID("fab592").call("reset")
    getObjectFromGUID("fb5299").call("reset")
    getObjectFromGUID("b50db5").call("reset")
    getObjectFromGUID("bcac8d").call("reset")

    -- Players HP
   for i, guid in pairs(FIRST_HEARTS_GUID) do
     local objFirst = getObjectFromGUID(guid)
     local isHeartActive = objFirst.getVar("isActive")
     if isHeartActive ~= nil and isHeartActive == false then
       local objSecond = getObjectFromGUID(SECOND_HEARTS_GUID[i])
       objSecond.call("onPickUp")
     end
   end
end

------------------------------------------------------------------------------------------------------------------------
--------------------------------------------- Edited by Ediforce44 -----------------------------------------------------
----------------------------------------------- global functions -------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
function table.copy(t)
    local tableCopy = {}
    for key, value in pairs(t) do
        tableCopy[key] = value
    end
    return tableCopy
end

REAL_PLAYER_COLOR = {
    Yellow = "[D0E431]",
    Green = "[2BB837]",
    Blue = "[1C79F8]",
    Red = "[C60A00]"
}

PRINT_COLOR_PLAYER = {
    YELLOW = REAL_PLAYER_COLOR["Yellow"],
    GREEN = REAL_PLAYER_COLOR["Green"],
    BLUE = REAL_PLAYER_COLOR["Blue"],
    RED = REAL_PLAYER_COLOR["Red"]
}

PRINT_COLOR_SPECIAL = {
    WARNING = "[fdd835]",
    SOUL = "[C8EFF7]",
    MONSTER = "[352853]",
    COIN = "[AB9023]",
    LOOT = "[B9E9F0]",
    FLOOR = "[5E4C3F]",
    TREASURE_LIGHT = "[D6BF5C]",
    TREASURE_DARK = "[998126]",
    HP = "[951312]",
    BLACK = "[010100]",
    GRAY = "[3B4449]",
    RED = "[CE3522]",
    GOLD = "[E4BC2F]"
}

ZONE_GUID_DECK = {
    MONSTER = "52e22c",
    HAPPEN = "61e7b7",
    TREASURE = "190cda",
    LOOT = "c413a5",
    BONUS_SOUL = "979776",
    FLOOR = "096e94",
    SOUL_TOKEN = "560abc"
}

ZONE_GUID_SOUL = {
    YELLOW = "92610d",
    GREEN = "f95f84",
    BLUE = "c0bd67",
    RED = "8515c8"
}

ZONE_GUID_MONSTER = {
    ONE = "329a95",
    TWO = "1a25c2",
    THREE = "27417f",
    FOUR = "f0d9fd",
    FIVE = "839d81",
    SIX = "6c1a32"
}

function getPlayerString(params)
    local playerString = "'Player not Found'"
    if params.playerColor ~= nil then
        playerString = REAL_PLAYER_COLOR[params.playerColor]
        if playerString == nil then
            playerString = ""
        end
        playerString = playerString .. params.playerColor .. "[-]"
    end
    return playerString
end

function getZoneGUIDS_Deck()
    return table.copy(ZONE_GUID_DECK)
end

function getZoneGUIDS_Soul()
    return table.copy(ZONE_GUID_SOUL)
end

function getZoneGUIDS_Monster()
    return table.copy(ZONE_GUID_MONSTER)
end

function getPrintColors_Player()
    return table.copy(PRINT_COLOR_PLAYER)
end

function getPrintColors_Special()
    return table.copy(PRINT_COLOR_SPECIAL)
end

function isPlayerAuthorized(params)
    -- If there is no owner, all players have the permission to interact with something
    if params.ownerPlayer == nil then
        return true
    end
    -- Interacting player has to be the owner or has to be an admin
    local player = nil
    if params.playerColor ~= nil then
        player = Player[params.playerColor]
    elseif params.player ~= nil then
        player = params.player
    else
        printToAll("[fdd835][WARNING][-] Wrong parameters in global function 'isPlayerAuthorized()'.")
        return false
    end
    return player == params.ownerPlayer or player.admin
end

function getDeckFromZone(params)
    if params.zoneGUID == nil then
        printToAll("[fdd835][WARNING][-] Wrong parameters in global function 'getDeckFromZone()'.")
        return nil
    end
    return getDeckOrCard(params.zoneGUID)
end

function getMonsterDeck()
    return getDeckOrCard(ZONE_GUID_DECK.MONSTER)
end

function getHappenDeck()
    return getDeckOrCard(ZONE_GUID_DECK.HAPPEN)
end

function getTreasureDeck()
    return getDeckOrCard(ZONE_GUID_DECK.TREASURE)
end

function getLootDeck()
    return getDeckOrCard(ZONE_GUID_DECK.LOOT)
end

function getBonusSoulDeck()
    return getDeckOrCard(ZONE_GUID_DECK.BONUS_SOUL)
end

function getFloorDeck()
    return getDeckOrCard(ZONE_GUID_DECK.FLOOR)
end

function getSoulTokenDeck()
    return getDeckOrCard(ZONE_GUID_DECK.SOUL_TOKEN)
end

function getCardFromDeck(params)
    if params.deck == nil then
        printToAll("[fdd835][WARNING][-] Wrong parameters in global function 'getCardFromDeck()'.")
        return nil
    end
    local obj = params.deck
    local card = nil
    if obj.tag == "Deck" then
        card = obj.takeObject()
    elseif obj.tag == "Card" then
        card = obj
    end
    return card
end

function placeSoulToken(params)
    local card = getCardFromDeck({deck = getSoulTokenDeck()})
    if card ~= nil then
        local zoneGUID = nil
        --Rotate card and get GUID for the soul zone
        if params.ownerColor == "Red" then
            card.setRotationSmooth({x=0, y=270, z=0}, false)
            zoneGUID = ZONE_GUID_SOUL.RED
        elseif params.ownerColor == "Blue" then
            card.setRotationSmooth({x=0, y=270, z=0}, false)
            zoneGUID = ZONE_GUID_SOUL.BLUE
        elseif params.ownerColor == "Green" then
            card.setRotationSmooth({x=0, y=90, z=0}, false)
            zoneGUID = ZONE_GUID_SOUL.GREEN
        elseif params.ownerColor == "Yellow" then
            card.setRotationSmooth({x=0, y=90, z=0}, false)
            zoneGUID = ZONE_GUID_SOUL.YELLOW
        else
            broadcastToAll(PRINT_COLOR_SPECIAL.SOUL .. "Nobody earned a soul. Hurray???")
            return
        end
        --Set position and print text
        local position = getObjectFromGUID(zoneGUID).call("nextFreeSoulPosition")
        if position == nil then
            printToAll("[fdd835][WARNING][-] Can't find a free position for a new soul token.")
            position = getSoulTokenDeck().getPosition()
        else
            broadcastToAll(getPlayerString({playerColor = params.ownerColor}) .. PRINT_COLOR_SPECIAL.SOUL
                            .. " earned a soul. Hurray!!!")
        end
        card.setPositionSmooth(position, false)
        return
    else
        printToAll("[fdd835][WARNING][-] Can't find the Soul Token deck: Maybe the soul tokens are empty. " ..
                    "Place the soul tokens on its starting position.")
    end
end
------------------------------------------------------------------------------------------------------------------------