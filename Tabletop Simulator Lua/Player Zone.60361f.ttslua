-- Written by Ediforce44
owner_color = "Blue"

ZONE_EDGES = {
    {x=-35, z=-8.5},      -- 1 = |""  ""| = 3
    {x=-35, z=-17},       -- 2 = |__  __| = 4
    {x=-8.5, z=-8.5},
    {x=-8.5, z=-17}
}

INDEX_MAX = 14
ROW_MAX = 2
INDICES_PER_ROW = INDEX_MAX / ROW_MAX

playerAlive = true
attachedObjects = {}
indexTable = {}

local function getTimerParameters(blockedIndex)
    local timerParameters = {
        ["identifier"] = "PlayerBlockedIndexTimer" .. self.guid .. tostring(blockedIndex),
        ["function_name"] = "resetBlockedIndex",
        ["parameters"] = {index = blockedIndex},
        ["delay"] = 2,
    }
    return timerParameters
end

function resetBlockedIndex(params)
    local row = math.floor((params.index - 1) / INDICES_PER_ROW) + 1
    local column = params.index - (INDICES_PER_ROW * (row - 1))
    indexTable[row][column].tempBlocked = false
end

local function payDeathPenalty()
    --TODO
    return
end

local function attachObject(object)
    attachedObjects[object.getGUID()] = 1     --Insert item attributes like "active", "loot", "happen", "ethernal", etc.
end

local function detachObject(object)
    attachedObjects[object.getGUID()] = nil
end

local function insertIndexEntry(newEntry)
    local ROW_WIDTH = math.abs(((ZONE_EDGES[2].z - ZONE_EDGES[1].z) / 2))
    local row = 0
    for r = 1, ROW_MAX do
        if newEntry.position.z < (ZONE_EDGES[2].z + (ROW_WIDTH * r)) then
            row = r
            break
        end
    end
    local newIndex = #indexTable[row] + 1
    for index , entry in pairs(indexTable[row]) do
        if entry.position.x > newEntry.position.x then
            newIndex = index
            break
        end
    end
    table.insert(indexTable[row], newIndex, newEntry)
end

local function initIndexTable()
    indexTable = {}
    for row = 1, ROW_MAX do
        table.insert(indexTable, {})
    end

    local position = {}
    for _ , snapPoint in pairs(Global.getSnapPoints()) do
        position = snapPoint.position
        if position.x > ZONE_EDGES[1].x and position.z < ZONE_EDGES[1].z then
            if position.x < ZONE_EDGES[4].x and position.z > ZONE_EDGES[4].z then
                insertIndexEntry({free = true, position = position, tempBlocked = false})
            end
        end
    end
end

local function resetIndexTable()
    for row = 1, ROW_MAX do
        for column = 1, INDICES_PER_ROW do
            indexTable[row][column].free = true
        end
    end
end

local function calculateIndexTable()
    resetIndexTable()
    local marginOffset = 0.7
    for _ , object in pairs(self.getObjects()) do
        if object.tag == "Card" or object.tag == "Deck" then
            local objectPosition = object.getPosition()
            local row = 0
            for r = 1, ROW_MAX do
                if math.abs(objectPosition.z - indexTable[r][1].position.z) < marginOffset then
                    row = r
                    break
                end
            end

            if row > 0 then
                for column = 1, INDICES_PER_ROW do
                    if math.abs(objectPosition.x - indexTable[row][column].position.x) < marginOffset then
                        indexTable[row][column].free = false
                    end
                end
            end
        end
    end
end

local function getRealPosition(indexPosition)
    return {indexPosition.x, 5, indexPosition.z}
end

local function getNextFreePosition()
    calculateIndexTable()
    for row = 1, ROW_MAX do
        for column = 1, INDICES_PER_ROW do
            if indexTable[row][column].free and (not indexTable[row][column].tempBlocked) then
                indexTable[row][column].tempBlocked = true
                Timer.create(getTimerParameters((INDICES_PER_ROW * (row - 1)) + column))
                return getRealPosition(indexTable[row][column].position)
            end
        end
    end
    return nil
end

function onLoad(saved_data)
    initIndexTable()
    calculateIndexTable()
    if saved_data ~= "" then
        local loaded_data = JSON.decode(saved_data)
        if loaded_data[1] then
            playerAlive = not (loaded_data[1] == false)      --Standard: true, only false if loaded_data[1] is false
        end
        if loaded_data[2] then
            attachedObjects = loaded_data[2]
            return
        end
    end
    for _ , obj in pairs(self.getObjects()) do
        if obj.tag == "Card" then
            attachObject(obj)
        end
    end
end

function onSave()
    return JSON.encode({playerAlive, attachedObjects})
end

function onObjectEnterZone(zone, enteringObject)
    if zone.getGUID() == self.guid then
        if enteringObject.tag == "Card" then
            attachObject(enteringObject)
        end
    end
end

function onObjectLeaveZone(zone, leavingObject)
    if zone.getGUID() == self.guid then
        if leavingObject.tag == "Card" then
            detachObject(leavingObject)
        end
    end
end

function deactivateCharacter()
    for _ , obj in pairs(self.getObjects()) do
        if obj.hasTag("Character") then
            obj.setRotationSmooth({0, 270, 0}, false)
        end
    end
end

function reanimatePlayer()
    playerAlive = true
end

function killPlayer()
    deactivateCharacter()
    payDeathPenalty()
    playerAlive = false
end

function placeObjectInZone(params)
    if params.object == nil then
        printToAll("[fdd835][WARNING][-] Wrong parameters in player zone function 'placeObjectInPlayerZone()'.")
        return
    end
    local freePosition = getNextFreePosition()
    if freePosition ~= nil then
        params.object.setRotationSmooth({0, 180, 0}, false)
        params.object.setPositionSmooth(freePosition, false)
    else
        params.object.deal(1, owner_color)
    end
end

-- More efficent for multi card placing
function placeMultipleObjectsInZone(params)
    if (params.objects == nil) or (#params.objects == 0) then
        printToAll("[fdd835][WARNING][-] Wrong parameters in player zone function 'placeMultipleObjectsInPlayerZone()'.")
        return
    end

    calculateIndexTable()
    local maxCardIndex = #params.objects
    local nextCardIndex = 1
    for row = 1, ROW_MAX do
        for column = 1, INDICES_PER_ROW do
            if indexTable[row][column].free then
                params.objects[nextCardIndex].setRotationSmooth({0, 180, 0}, false)
                params.objects[nextCardIndex].setPositionSmooth(getRealPosition(indexTable[row][column].position), false)
                nextCardIndex = nextCardIndex + 1
                if nextCardIndex > maxCardIndex then
                    return
                end
            end
        end
    end
    -- Not enough free fields for cards
    for index = nextCardIndex , maxCardIndex do
        params.objects[index].deal(1, owner_color)
    end
end