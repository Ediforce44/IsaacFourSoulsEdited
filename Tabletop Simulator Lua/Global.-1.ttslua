------------------------------------------------------------------------------------------------------------------------
--------------------------------------------- Edited by Ediforce44 -----------------------------------------------------
------------------------------------------------ local functions -------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
local function getDeckOrCard(zoneGUID)
    local zone = getObjectFromGUID(zoneGUID)
    if zone == nil then
        printToAll("[fdd835][WARNING][-] Wrong Zone. Zone with GUID '" .. zoneGUID .. "' doesn't exist.")
        return nil
    end

    for _, obj in pairs(zone.getObjects()) do
      if obj.tag == "Deck" or obj.tag == "Card" then
          return obj
      end
    end
    --Can't find a Deck or Card in the zone
    local zoneName = ""
    for name, guid in pairs(ZONE_GUID_DECK) do
        if guid == zoneGUID then
            zoneName = tostring(name)
            goto printError
        end
    end
    zoneName = "'Zone is not a Deck-Zone'"
    ::printError::
    printToAll("[fdd835][WARNING][-] Can't find the deck or card in zone: " .. zoneName .. ".")
    return nil
end
------------------------------------------------------------------------------------------------------------------------

function onLoad(saved_data)         --EbyE44
    if saved_data ~= "" then
        local loaded_data = JSON.decode(saved_data)
        if loaded_data[1] then
            activePlayerColor = loaded_data[1]
        end
        if loaded_data[2] then
            automaticRewarding.Yellow = loaded_data[2].Yellow and true
            automaticRewarding.Green = loaded_data[2].Green and true
            automaticRewarding.Blue = loaded_data[2].Blue and true
            automaticRewarding.Red = loaded_data[2].Red and true
        end
    end
    broadcastToAll("The Binding of Isaac: Four Souls - FULL loaded.", {1,1,1})
end

function onSave()                   --EbyE44
    return JSON.encode({activePlayerColor, automaticRewarding})
end

HEART_TOKENS_GUID = {
    Yellow = {"c02908", "3f81b7", "f8e991", "f825c2", "2a9dfc", "443adb"},
    Green = {"12326f", "c326f1", "f5d095", "7e882b", "66804c", "e24915"},
    Blue = {"78f8e7", "c9f7b2", "4b26ea", "098303", "9e8aa0", "dbcc87"},
    Red = {"bcabf3", "ca5135", "0a7171", "33bf0c", "159680", "c7837a"}
}

-- Auto monster HP reset
FIRST_HEARTS_GUID = {
  -- Blue player hearts
  HEART_TOKENS_GUID["Blue"][1],
   -- Red player hearts
  HEART_TOKENS_GUID["Red"][1],
  -- Yellow player hearts
  HEART_TOKENS_GUID["Yellow"][1],
  -- Green player hearts
  HEART_TOKENS_GUID["Green"][1]
}

SECOND_HEARTS_GUID = {
  -- Blue player hearts
  HEART_TOKENS_GUID["Blue"][2],
   -- Red player hearts
  HEART_TOKENS_GUID["Red"][2],
  -- Yellow player hearts
  HEART_TOKENS_GUID["Yellow"][2],
  -- Green player hearts
  HEART_TOKENS_GUID["Green"][2]
}

function onPlayerTurn(player, previous_player)
    if player ~= nil then
        activePlayerColor = player.color
    end

    if previous_player == nil then
        print(getPlayerString({playerColor = player.color}) .. " is going first. It's now their turn.")
        previous_player = player
    else
        print(getPlayerString({playerColor = previous_player.color}) .. "'s turn is over. It's now "
                .. getPlayerString({playerColor = player.color}) .. "'s turn.")
    end

    -- Reset Monster Zones (inclusive HP-Counter)
    getObjectFromGUID(ZONE_GUID_DECK.MONSTER).call("resetAllMonsterZones")

    -- Reset Shop Zones
    getObjectFromGUID(ZONE_GUID_DECK.TREASURE).call("resetAllShopZones")        -- In this version it does nothing :D

    -- Reset Players HP
   for color , guid in pairs(FIRST_HEARTS_GUID) do
       local firstHeart = getObjectFromGUID(guid)
       local isHeartActive = firstHeart.getVar("isActive")
       if isHeartActive ~= nil and isHeartActive == false then
           getObjectFromGUID(SECOND_HEARTS_GUID[color]).call("onPickUp")
       end
   end
end

------------------------------------------------------------------------------------------------------------------------
--------------------------------------------- Edited by Ediforce44 -----------------------------------------------------
----------------------------------------------- global functions -------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
local colorPickerAttachment = {}

function colorPicker_attach(params)
    if params.afterPickFunction and params.functionOwner then
        table.insert(colorPickerAttachment, {picker = params.picker or activePlayerColor
            , afterPickFunction = params.afterPickFunction, functionOwner = params.functionOwner
            , reason = params.reason or "Unknown", functionParams = params.functionParams or {}})
        if #colorPickerAttachment == 1 then
            pickColor(false)
        end
        return true
    end
    return false
end

function pickColor(falseInput)
    if #colorPickerAttachment == 0 then
        return
    end

    local nextEntry = colorPickerAttachment[1]
    UI.setAttribute("colorPicker", "visibility", nextEntry.picker)
    UI.setAttribute("colorPicker", "active", true)
    if (not falseInput) then
        broadcastToAll(getPlayerString({playerColor = nextEntry.picker}) .. " picks a Player Color for "
            .. nextEntry.reason .. ".")
        broadcastToColor("Please pick a Player Color for " .. nextEntry.reason .. ".", nextEntry.picker)
    end
end

function colorPicked(player, _, idValue)
    local picker = getPlayerString({playerColor = player.color})
    local picked = getPlayerString({playerColor = idValue})
    if not Player[idValue].seated then
        broadcastToColor(picked .. " is not a active Player!", player.color)
        pickColor(true)
        return
    end
    broadcastToAll(picker .. " picked " .. picked .. "!")
    local nextEntry = colorPickerAttachment[1]
    local functionParams = nextEntry.functionParams or {}
    functionParams.pickedColor = idValue
    nextEntry.functionOwner.call(nextEntry.afterPickFunction, functionParams)
    table.remove(colorPickerAttachment, 1)
    UI.setAttribute("colorPicker", "active", false)
    if #colorPickerAttachment > 0 then
        pickColor(false)
    end
end

function cancelPick(player, _, idValue)
    broadcastToAll(getPlayerString({playerColor = player.color}) .. " canceled the Color-Pick!", Table)
    table.remove(colorPickerAttachment, 1)
    UI.setAttribute("colorPicker", "active", false)
    if #colorPickerAttachment > 0 then
        pickColor(false)
    end
end

activePlayerColor = "Red"

automaticRewarding = {
    Yellow = true,
    Green = true,
    Blue = true,
    Red = true
}

CLICK_DELAY = 0.3

function table.copy(t)
    local tableCopy = {}
    for key, value in pairs(t) do
        tableCopy[key] = value
    end
    return tableCopy
end

REAL_PLAYER_COLOR = {
    Yellow = "[D0E431]",
    Green = "[2BB837]",
    Blue = "[1C79F8]",
    Red = "[C60A00]"
}

REAL_PLAYER_COLOR_RGB = {
    Yellow = {208/255, 228/255, 49/255},
    Green = {43/255, 184/255, 55/255},
    Blue = {28/255, 121/255, 248/255},
    Red = {198/255, 10/255, 0/255}
}

PRINT_COLOR_PLAYER = {
    YELLOW = REAL_PLAYER_COLOR["Yellow"],
    GREEN = REAL_PLAYER_COLOR["Green"],
    BLUE = REAL_PLAYER_COLOR["Blue"],
    RED = REAL_PLAYER_COLOR["Red"]
}

PRINT_COLOR_SPECIAL = {
    WARNING = "[fdd835]",
    SOUL = "[C8EFF7]",
    MONSTER_LIGHT = "[67588B]",
    MONSTER = "[352853]",
    COIN = "[AB9023]",
    LOOT = "[B9E9F0]",
    FLOOR = "[5E4C3F]",
    TREASURE_LIGHT = "[D6BF5C]",
    TREASURE_DARK = "[998126]",
    HP = "[951312]",
    BLACK = "[010100]",
    GRAY = "[3B4449]",
    RED = "[CE3522]",
    GOLD = "[E4BC2F]"
}

ZONE_GUID_DECK = {
    TREASURE = "190cda",
    FLOOR = "096e94",
    LOOT = "c413a5",
    MONSTER = "52e22c",
    HAPPEN = "61e7b7",
    BONUS_SOUL = "979776",
    SOUL_TOKEN = "560abc"
}

ZONE_GUID_SHOP = {
    ONE = "fd849b",
    TWO = "15e210",
    THREE = "478a51",
    FOUR = "512193",
    FIVE = "5d1ed5",
    SIX = "094179"
}

ZONE_GUID_MONSTER = {
    ONE = "329a95",
    TWO = "1a25c2",
    THREE = "27417f",
    FOUR = "f0d9fd",
    FIVE = "839d81",
    SIX = "6c1a32"
}

ZONE_GUID_PLAYER = {
    Yellow = "bb01dd",
    Green = "19df91",
    Blue = "60361f",
    Red = "b35919"
}

ZONE_GUID_PILL = {
    Yellow = "53dd4c",
    Green = "e3361a",
    Blue = "9af794",
    Red = "d12e48"
}

ZONE_GUID_SOUL = {
    Yellow = "92610d",
    Green = "f95f84",
    Blue = "c0bd67",
    Red = "8515c8"
}

COIN_COUNTER_GUID = {
    Yellow = "9d76db",
    Green = "c46653",
    Blue = "8edf63",
    Red = "965140"
}

HEART_TOKENS_GUID = {
    Yellow = {"c02908", "3f81b7", "f8e991", "f825c2", "2a9dfc", "443adb"},
    Green = {"12326f", "c326f1", "f5d095", "7e882b", "66804c", "e24915"},
    Blue = {"78f8e7", "c9f7b2", "4b26ea", "098303", "9e8aa0", "dbcc87"},
    Red = {"bcabf3", "ca5135", "0a7171", "33bf0c", "159680", "c7837a"}
}

MONSTER_HP_COUNTER_GUID = {
    ONE = "9bb226",
    TWO = "a75691",
    THREE = "fab592",
    FOUR = "fb5299",
    FIVE = "b50db5",
    SIX = "bcac8d"
}

COUNTER_BAGS_GUID = {
    NORMAL = "bb7a32"
}

DISCARD_PILE_POSITION = {
    TREASURE = {-33.91, 2.53, 0},
    FLOOR = {-6.20, 1.89, -1.70},
    LOOT = {1.64, 2.53, 0},
    MONSTER = {34.06, 5, 0}
}

function getPlayerString(params)
    local playerString = "'Player not Found'"
    if params.playerColor ~= nil then
        playerString = REAL_PLAYER_COLOR[params.playerColor]
        if playerString == nil then
            playerString = ""
        end
        playerString = playerString .. params.playerColor .. "[-]"
    end
    return playerString
end

function getActivePlayerString()
    return getPlayerString({playerColor = activePlayerColor})
end

function isPlayerAuthorized(params)
    -- If there is no owner, all players have the permission to interact with something
    if params.ownerPlayer == nil then
        return true
    end
    -- Interacting player has to be the owner or has to be an admin
    local player = nil
    if params.playerColor ~= nil then
        player = Player[params.playerColor]
    elseif params.player ~= nil then
        player = params.player
    else
        printToAll("[fdd835][WARNING][-] Wrong parameters in global function 'isPlayerAuthorized()'.")
        return false
    end
    return player == params.ownerPlayer or player.admin
end

function deactivateCharacter(params)
    if params.playerColor == nil then
        printToAll("[fdd835][WARNING][-] Wrong parameters in global function 'deactivateCharacter()'.")
        return
    end
    getObjectFromGUID(ZONE_GUID_PLAYER[params.playerColor]).call("deactivateCharacter")
end

function switchRewardingMode(params)
    local color = ""
    if params.playerColor == nil then
        if params.player == nil then
            printToAll("[fdd835][WARNING][-] Wrong parameters in global function 'deactivateRewarding()'.")
            return
        else
            color = params.player.color
        end
    else
        color = params.playerColor
    end
    local newValue = not automaticRewarding[color]
    automaticRewarding[color] = newValue
    getObjectFromGUID(ZONE_GUID_SOUL[color]).call("onSwitchingRewardingMode", {newState = newValue})
end

function getCounterInZone(params)
    if params.zone == nil then
        printToAll("[fdd835][WARNING][-] Wrong parameters in global function 'getCounterInZone()'.")
    else
        for _ , object in pairs(params.zone.getObjects()) do
            if object.getName() == "Counter\n" or object.getName() == "Counter" then
                return object
            end
        end
    end
end

--Thank you Bone White in discord for this <3       --Edited by Ediforce44
function findIntInScript(params)
    if params.scriptString == nil or params.varName then
        printToAll("[fdd835][WARNING][-] Wrong parameters in global function 'findIntInScript()'.")
        return nil
    end
    for line in string.gmatch(scriptString,"[^\r\n]+") do -- for each line in the script
        if string.sub(line,1,#varName) == varName then -- if the beginning of the line matches var
            local value = string.match(line,"%d+",#varName) -- get the first number listed in that line after the var name
            return tonumber(value)
        end
    end
    return nil
end

function getDeckFromZone(params)
    if params.zoneGUID == nil then
        printToAll("[fdd835][WARNING][-] Wrong parameters in global function 'getDeckFromZone()'.")
        return nil
    end
    return getDeckOrCard(params.zoneGUID)
end

function getMonsterDeck()
    return getDeckOrCard(ZONE_GUID_DECK.MONSTER)
end

function getHappenDeck()
    return getDeckOrCard(ZONE_GUID_DECK.HAPPEN)
end

function getTreasureDeck()
    return getDeckOrCard(ZONE_GUID_DECK.TREASURE)
end

function getLootDeck()
    return getDeckOrCard(ZONE_GUID_DECK.LOOT)
end

function getBonusSoulDeck()
    return getDeckOrCard(ZONE_GUID_DECK.BONUS_SOUL)
end

function getFloorDeck()
    return getDeckOrCard(ZONE_GUID_DECK.FLOOR)
end

function getSoulTokenDeck()
    return getDeckOrCard(ZONE_GUID_DECK.SOUL_TOKEN)
end

function getActivePlayerZone()
    return getObjectFromGUID(ZONE_GUID_PLAYER[activePlayerColor])
end

function getCardFromDeck(params)
    if params.deck == nil then
        printToAll("[fdd835][WARNING][-] Wrong parameters in global function 'getCardFromDeck()'.")
        return nil
    end
    local obj = params.deck
    local card = nil
    if obj.tag == "Deck" then
        card = obj.takeObject()
    elseif obj.tag == "Card" then
        card = obj
    end
    return card
end

function placeSoulToken(params)
    if params.playerColor == nil then
        printToAll("[fdd835][WARNING][-] Wrong parameters in global function 'placeSoulToken()'.")
        return
    end
    local soulToken = getCardFromDeck({deck = getSoulTokenDeck()})
    if soulToken ~= nil then
        placeObjectInSoulZone({playerColor = params.playerColor, object = soulToken})
    else
        printToAll("[fdd835][WARNING][-] Can't find the Soul Token deck: Maybe the soul tokens are empty. " ..
                    "Place the soul tokens on its starting position.")
    end
end

function placeObjectInSoulZone(params)
    if (params.playerColor == nil) or (params.object == nil) then
        printToAll("[fdd835][WARNING][-] Wrong parameters in global function 'placeObjectInSoulZone()'.")
    else
        getObjectFromGUID(ZONE_GUID_SOUL[params.playerColor]).call("placeObjectInZone", {object = params.object})
    end
end

function placeObjectInPillZone(params)
    if (params.playerColor == nil) or (params.object == nil) then
        printToAll("[fdd835][WARNING][-] Wrong parameters in global function 'placeObjectInPillZone()'.")
    else
        getObjectFromGUID(ZONE_GUID_PILL[params.playerColor]).call("placeObjectInZone", {object = params.object})
    end
end

function placeObjectsInPlayerZone(params)
    if (params.playerColor == nil) or (params.objects == nil) then
        printToAll("[fdd835][WARNING][-] Wrong parameters in global function 'placeObjectsInPlayerZone()'.")
    else
        local cards = params.objects
        if #cards > 1 then
            getObjectFromGUID(ZONE_GUID_PLAYER[params.playerColor]).call("placeMultipleObjectsInZone"
                , {cards = params.objects})
        elseif #cards == 1 then
            getObjectFromGUID(ZONE_GUID_PLAYER[params.playerColor]).call("placeObjectInZone", {card = params.objects[1]})
        end
    end
end
------------------------------------------------------------------------------------------------------------------------