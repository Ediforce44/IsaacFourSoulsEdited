
local ACTIVE_BUTTON_INDEX = 1
local ANIMATION_BUTTON_INDEX = 2

local animation_on = false

function onLoad(saved_data)
    self.createButton({
      click_function = "switchBuilderMode",
      function_owner = self,
      label          = "",
      position       = {1.5, 1, -0.12},
      width          = 300,
      height         = 300,
      color          = {1, 1, 1},
    })
    self.createButton({
      click_function = "switchAnimationMode",
      function_owner = self,
      label          = "",
      position       = {1.5, 1, 0.6},
      width          = 300,
      height         = 300,
      color          = {1, 1, 1},
    })

    if saved_data ~= "" then
        local loaded_data = JSON.decode(saved_data)
        if loaded_data[1] == true then
            switchBuilderMode()
        end
        if loaded_data[2] == true then
            switchAnimationMode()
        end
    end
end

function onSave()
    return JSON.encode({isDeckBuilderON(), animation_on})
end

function isDeckBuilderON()
    local activeButton = self.getButtons()[ACTIVE_BUTTON_INDEX]
    return activeButton.label ~= ""
end

function switchBuilderMode()
    local newLabel = ""
    if not isDeckBuilderON() then
        newLabel = "✓"
    end
    self.editButton({index=ACTIVE_BUTTON_INDEX-1, label=newLabel, font_color={0, 0, 0}, font_size=200})
end

function switchAnimationMode()
    local newLabel = ""
    if not animation_on then
        newLabel = "✓"
    end
    self.editButton({index=ANIMATION_BUTTON_INDEX-1, label=newLabel, font_color={0, 0, 0}, font_size=200})
    animation_on = not animation_on
end

------------------------------------------------------------------------------------------------------------------------
--------------------------------------------      Deck Builder        --------------------------------------------------
------------------------------------------------------------------------------------------------------------------------

local DUMMY_CARDS = {
    TREASURE = {"20478b", "de6fa6"},
    LOOT = {"fc7f84", "d8bf8b"},
    MONSTER = {"6f7d81", "ad45a5"}
}

local DECK_TREASURE = {
    T_ACTIVE  = {40, 40},
    T_PASSIVE = {44, 44},
    T_PAID    = {10, 10},
    T_ONE_USE = {5, 5},
    T_SOUL    = {1, 1}
}

local DECK_LOOT = {
    L_TAROT_MISC    = {23, 22},
    L_TRINKET       = {11, 10},
    L_PILL          = {3, 2},
    L_RUNE          = {3, 3},
    L_BUTTER_BEAN   = {5, 5},
    L_BOMB          = {6, 5},
    L_BATTERY       = {6, 5},
    L_DICE_SHARD    = {3, 3},
    L_SOUL_HEART    = {2, 2},
    L_LOST_SOUL     = {1, 1},
    L_NICKEL        = {6, 5},
    L_FOUR_CENT     = {12, 10},
    L_THREE_CENT    = {11, 10},
    L_TWO_CENT      = {6, 5},
    L_ONE_CENT      = {2, 2}
}

local DECK_MONSTER = {
    M_EPIC        = {1, 1},
    M_BOSS        = {30, 30},
    M_BASIC       = {30, 30},
    M_CURSED      = {9, 9},
    M_HOLY_CHARMED= {9, 9},
    M_GOOD        = {8, 8},
    M_BAD         = {8, 8},
    M_CURSE       = {5, 5}
}

DECK_BUILDER_MODE = {
    NORMAL  = 1,
    DRAFT   = 2
}

local function getDeckFromTable(name)
    for _, obj in ipairs(getObjectsWithTag("Deck")) do
        if obj.getName() == name then
            return obj
        end
    end
    return nil
end

local function setUpLUT(deck)
    local lookUpTable = {}
    for _, card in pairs(deck.getObjects()) do
        local insertTag = "EMPTY"
        if not (card.tags == {}) then
            insertTag = card.tags[1]
        end
        if lookUpTable[insertTag] == nil then
            lookUpTable[insertTag] = {}
        end
        table.insert(lookUpTable[insertTag], card.guid)
    end
    return lookUpTable
end

local function getDummyDeckGUID(deckZone)
    local dummyDeckGUID = nil
    for _, obj in ipairs(deckZone.getObjects()) do
        if obj.name == "Deck" then
            dummyDeckGUID = obj.guid
            break
        end
    end
    return dummyDeckGUID
end

local function buildTreasureDeck(mode)
    local treasureDeck = nil
    local treasureCards = getDeckFromTable("TREASURE_CARDS")
    if treasureCards == nil then
        return nil
    end
    local lookUpTable = setUpLUT(treasureCards)
    local dummyTreasureDeckGUID = getDummyDeckGUID(getObjectFromGUID(Global.getTable("ZONE_GUID_DECK").TREASURE))
    if (dummyTreasureDeckGUID == nil) or (dummyTreasureDeckGUID == "") then
        treasureCards.setPositionSmooth(Global.getTable("DECK_POSITION").TREASURE, false)
        treasureCards.setRotationSmooth({180, 0, 0}, false)
        treasureDeck = treasureCards
    else
        treasureDeck = getObjectFromGUID(dummyTreasureDeckGUID)
        if treasureDeck.locked then
            treasureDeck.setLock(false)
        end
        for type, amountTable in pairs(DECK_TREASURE) do
            for i = 1, amountTable[mode] do
                treasureDeck.putObject(treasureCards.takeObject({guid = lookUpTable[type][i]}))
            end
        end
        for _, dummyGUID in ipairs(DUMMY_CARDS.TREASURE) do
            treasureDeck.takeObject({guid = dummyGUID, position = {46.8, 2, 12}})
        end
    end
    treasureDeck.setName("Treasure Deck")
    return treasureDeck
end

local function buildLootDeck(mode)
    local lootDeck = nil
    local lootCards = getDeckFromTable("LOOT_CARDS")
    if lootCards == nil then
        return nil
    end
    local lookUpTable = setUpLUT(lootCards)
    local dummyLootDeckGUID = getDummyDeckGUID(getObjectFromGUID(Global.getTable("ZONE_GUID_DECK").LOOT))
    if (dummyLootDeckGUID == nil) or (dummyLootDeckGUID == "") then
        lootCards.setPositionSmooth(Global.getTable("DECK_POSITION").LOOT, false)
        lootCards.setRotationSmooth({180, 0, 0}, false)
        lootDeck = lootCards
    else
        lootDeck = getObjectFromGUID(dummyLootDeckGUID)
        if lootDeck.locked then
            lootDeck.setLock(false)
        end
        for type, amountTable in pairs(DECK_LOOT) do
            for i = 1, amountTable[mode] do
                lootDeck.putObject(lootCards.takeObject({guid = lookUpTable[type][i]}))
            end
        end
        for _, dummyGUID in ipairs(DUMMY_CARDS.LOOT) do
            lootDeck.takeObject({guid = dummyGUID, position = {46.8, 2, 7}})
        end
    end
    lootDeck.setName("Loot Deck")
    return lootDeck
end

local function buildMonsterDeck(mode)
    local monsterDeck = nil
    local monsterCards = getDeckFromTable("MONSTER_CARDS")
    if monsterCards == nil then
        return nil
    end
    local lookUpTable = setUpLUT(monsterCards)
    local dummyMonsterDeckGUID = getDummyDeckGUID(getObjectFromGUID(Global.getTable("ZONE_GUID_DECK").MONSTER))
    if (dummyMonsterDeckGUID == nil) or (dummyMonsterDeckGUID == "") then
        monsterCards.setPositionSmooth(Global.getTable("DECK_POSITION").MONSTER, false)
        monsterCards.setRotationSmooth({180, 0, 0}, false)
        monsterDeck = monsterCards
    else
        monsterDeck = getObjectFromGUID(dummyMonsterDeckGUID)
        if monsterDeck.locked then
            monsterDeck.setLock(false)
        end
        for type, amountTable in pairs(DECK_MONSTER) do
            for i = 1, amountTable[mode] do
                monsterDeck.putObject(monsterCards.takeObject({guid = lookUpTable[type][i]}))
            end
        end
        for _, dummyGUID in ipairs(DUMMY_CARDS.MONSTER) do
            monsterDeck.takeObject({guid = dummyGUID, position = {46.8, 2, -6}})
        end
    end
    monsterDeck.setName("Monster Deck")
    return monsterDeck
end

function buildDecks(params)
    local buildingMode = 1
    if params.buildingMode ~= nil then
        buildingMode = params.buildingMode
    end

    local newDecks = {}
    newDecks.TREASURE = buildTreasureDeck(buildingMode)
    newDecks.LOOT = buildLootDeck(buildingMode)
    newDecks.MONSTER = buildMonsterDeck(buildingMode)
    return newDecks
end