
local ACTIVE_BUTTON_INDEX = 1
local ANIMATION_BUTTON_INDEX = 2

local animation_on = false

function onLoad(saved_data)
    self.createButton({
      click_function = "switchBuilderMode",
      function_owner = self,
      label          = "",
      position       = {1.5, 1, -0.12},
      width          = 300,
      height         = 300,
      color          = {1, 1, 1},
    })
    self.createButton({
      click_function = "switchAnimationMode",
      function_owner = self,
      label          = "",
      position       = {1.5, 1, 0.6},
      width          = 300,
      height         = 300,
      color          = {1, 1, 1},
    })

    if saved_data ~= "" then
        local loaded_data = JSON.decode(saved_data)
        if loaded_data[1] == true then
            switchBuilderMode()
        end
        if loaded_data[2] == true then
            switchAnimationMode()
        end
    end
end

function onSave()
    return JSON.encode({isDeckBuilderON(), animation_on})
end

function isDeckBuilderON()
    local activeButton = self.getButtons()[ACTIVE_BUTTON_INDEX]
    return (activeButton.label ~= "")
end

function switchBuilderMode()
    local newLabel = ""
    if not isDeckBuilderON() then
        newLabel = "✓"
    end
    self.editButton({index=ACTIVE_BUTTON_INDEX-1, label=newLabel, font_color={0, 0, 0}, font_size=200})
end

function switchAnimationMode()
    local newLabel = ""
    if not animation_on then
        newLabel = "✓"
    end
    self.editButton({index=ANIMATION_BUTTON_INDEX-1, label=newLabel, font_color={0, 0, 0}, font_size=200})
    animation_on = not animation_on
end

------------------------------------------------------------------------------------------------------------------------
--------------------------------------------      Deck Builder        --------------------------------------------------
------------------------------------------------------------------------------------------------------------------------

local DUMMY_CARDS = {
    TREASURE = {"20478b", "de6fa6"},
    LOOT = {"fc7f84", "d8bf8b"},
    MONSTER = {"6f7d81", "ad45a5"}
}

DECK_BUILDER_MODE = {
    NORMAL  = 1,
    DRAFT   = 2
}

local DECK_TREASURE = {
    {
        T_ACTIVE  = 40,
        T_PASSIVE = 44,
        T_PAID    = 10,
        T_ONE_USE = 5,
        T_SOUL    = 1
    },
    {
        T_ACTIVE  = 40,
        T_PASSIVE = 44,
        T_PAID    = 10,
        T_ONE_USE = 5,
        T_SOUL    = 1
    }
}

local DECK_LOOT = {
    {
        L_TAROT_MISC    = 23,
        L_TRINKET       = 11,
        L_PILL          = 3,
        L_RUNE          = 3,
        L_BUTTER_BEAN   = 5,
        L_BOMB          = 6,
        L_BATTERY       = 6,
        L_DICE_SHARD    = 3,
        L_SOUL_HEART    = 2,
        L_LOST_SOUL     = 1,
        L_NICKEL        = 6,
        L_FOUR_CENT     = 12,
        L_THREE_CENT    = 11,
        L_TWO_CENT      = 6,
        L_ONE_CENT      = 2
    },
    {
        L_TAROT_MISC    = 22,
        L_TRINKET       = 10,
        L_PILL          = 2,
        L_RUNE          = 3,
        L_BUTTER_BEAN   = 5,
        L_BOMB          = 5,
        L_BATTERY       = 5,
        L_DICE_SHARD    = 3,
        L_SOUL_HEART    = 2,
        L_LOST_SOUL     = 1,
        L_NICKEL        = 5,
        L_FOUR_CENT     = 10,
        L_THREE_CENT    = 10,
        L_TWO_CENT      = 5,
        L_ONE_CENT      = 2
    }
}

local DECK_MONSTER = {
    {
        M_EPIC        = 1,
        M_BOSS        = 30,
        M_BASIC       = 30,
        M_CURSED      = 9,
        M_HOLY_CHARMED= 9,
        M_GOOD        = 8,
        M_BAD         = 8,
        M_CURSE       = 5
    },
    {
        M_EPIC        = 1,
        M_BOSS        = 30,
        M_BASIC       = 30,
        M_CURSED      = 9,
        M_HOLY_CHARMED= 9,
        M_GOOD        = 8,
        M_BAD         = 8,
        M_CURSE       = 5
    }
}

local function getDeckFromTable(name)
    for _, obj in ipairs(getObjectsWithTag("Deck")) do
        if obj.getName() == name then
            return obj
        end
    end
    return nil
end

local function setUpLUT(deck)
    local lookUpTable = {}
    for _, card in pairs(deck.getObjects()) do
        local insertTag = "EMPTY"
        if not (card.tags == {}) then
            insertTag = card.tags[1]
        end
        if lookUpTable[insertTag] == nil then
            lookUpTable[insertTag] = {}
        end
        table.insert(lookUpTable[insertTag], card.guid)
    end
    return lookUpTable
end

local function getDummyDeckGUID(deckZone)
    local dummyDeckGUID = nil
    for _, obj in ipairs(deckZone.getObjects()) do
        if obj.name == "Deck" then
            dummyDeckGUID = obj.guid
            break
        end
    end
    return dummyDeckGUID
end

local function buildDeck(baseDeck, cardSource, lookUpTable, tagTable)
    for type, amount in pairs(tagTable) do
        for i = 1, amount do
            baseDeck.putObject(cardSource.takeObject({guid = lookUpTable[type][i]}))
        end
    end
end

local function buildTreasureDeck(mode)
    local treasureDeck = nil
    local treasureZone = getObjectFromGUID(Global.getTable("ZONE_GUID_DECK").TREASURE)
    local treasureCards = getDeckFromTable("TREASURE_CARDS")
    if treasureCards == nil then
        return nil
    end
    local lookUpTable = setUpLUT(treasureCards)
    local dummyTreasureDeckGUID = getDummyDeckGUID(getObjectFromGUID(Global.getTable("ZONE_GUID_DECK").TREASURE))
    if dummyTreasureDeckGUID == nil then
        treasureCards.setPositionSmooth(Global.getTable("DECK_POSITION").TREASURE, false)
        treasureCards.setRotationSmooth({180, 0, 0}, false)
        treasureDeck = treasureCards
    else
        local dummyDeck = getObjectFromGUID(dummyTreasureDeckGUID)
        if dummyDeck.locked then
            dummyDeck.setLock(false)
        end
        treasureDeck = dummyDeck
        if isDeckBuilderON() then
            buildDeck(treasureDeck, treasureCards, lookUpTable, DECK_TREASURE[mode])
        else
            treasureDeck.putObject(treasureCards)
        end
        for _, dummyGUID in ipairs(DUMMY_CARDS.TREASURE) do
            treasureDeck.takeObject({guid = dummyGUID, position = {46.8, 2, 12}})
        end
    end
    treasureDeck.setName("Treasure Deck")
    return treasureDeck
end

local function buildLootDeck(mode)
    local lootDeck = nil
    local lootZone = getObjectFromGUID(Global.getTable("ZONE_GUID_DECK").LOOT)
    local lootCards = getDeckFromTable("LOOT_CARDS")
    if lootCards == nil then
        return nil
    end
    local lookUpTable = setUpLUT(lootCards)
    local dummyLootDeckGUID = getDummyDeckGUID(getObjectFromGUID(Global.getTable("ZONE_GUID_DECK").LOOT))
    if dummyLootDeckGUID == nil then
        lootCards.setPositionSmooth(Global.getTable("DECK_POSITION").LOOT, false)
        lootCards.setRotationSmooth({180, 0, 0}, false)
        lootDeck = lootCards
    else
        local dummyDeck = getObjectFromGUID(dummyLootDeckGUID)
        if dummyDeck.locked then
            dummyDeck.setLock(false)
        end
        lootDeck = dummyDeck
        if isDeckBuilderON() then
            buildDeck(lootDeck, lootCards, lookUpTable, DECK_LOOT[mode])
        else
            lootDeck.putObject(lootCards)
        end
        for _, dummyGUID in ipairs(DUMMY_CARDS.LOOT) do
            lootDeck.takeObject({guid = dummyGUID, position = {46.8, 2, 7}})
        end
    end
    lootDeck.setName("Loot Deck")
    return lootDeck
end

local function buildMonsterDeck(mode)
    local monsterDeck = nil
    local monsterZone = getObjectFromGUID(Global.getTable("ZONE_GUID_DECK").MONSTER)
    local monsterCards = getDeckFromTable("MONSTER_CARDS")
    if monsterCards == nil then
        return nil
    end
    local lookUpTable = setUpLUT(monsterCards)
    local dummyMonsterDeckGUID = getDummyDeckGUID(monsterZone)
    if dummyMonsterDeckGUID == nil then
        monsterCards.setPositionSmooth(Global.getTable("DECK_POSITION").MONSTER, false)
        monsterCards.setRotationSmooth({180, 0, 0}, false)
        monsterDeck = monsterCards
    else
        local dummyDeck = getObjectFromGUID(dummyMonsterDeckGUID)
        if dummyDeck.locked then
            dummyDeck.setLock(false)
        end
        monsterDeck = dummyDeck
        if isDeckBuilderON() then
            buildDeck(monsterDeck, monsterCards, lookUpTable, DECK_MONSTER[mode])
        else
            monsterDeck.putObject(monsterCards)
        end
        for _, dummyGUID in ipairs(DUMMY_CARDS.MONSTER) do
            monsterDeck.takeObject({guid = dummyGUID, position = {46.8, 2, -7}})
        end
    end
    monsterDeck.setName("Monster Deck")
    return monsterDeck
end

function buildDecks(params)
    local buildingMode = 1
    if params.buildingMode ~= nil then
        buildingMode = params.buildingMode
    end

    local newDecks = {}
    newDecks.TREASURE = buildTreasureDeck(buildingMode)
    newDecks.LOOT = buildLootDeck(buildingMode)
    newDecks.MONSTER = buildMonsterDeck(buildingMode)
    return newDecks
end