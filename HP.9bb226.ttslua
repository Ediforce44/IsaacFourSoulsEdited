--- Edited by Ediforce44
zone_guid = Global.call("getZoneGUIDS_Monster").ONE

last_value = 0
function onObjectEnterScriptingZone(zone, object)
    if zone ~= getObjectFromGUID(zone_guid) then
        return
    end
    if object.tag == "Deck" then
        local containedObjects = zone.getObjects()[1].getData().ContainedObjects
        local firstData = containedObjects[#containedObjects]
        local script = firstData["LuaScript"]
        local scriptVal = findInScript(script, "hp")
        if scriptVal > 0 then
            val = scriptVal
        else
            val = object.getVar("hp") or 0
        end
    elseif object.getVar("hp") or 0 > 0 then
            val = object.getVar("hp")
    end
    updateVal()
    updateSave()
end

--Thank you Bone White in discord for this <3
function findInScript(script, var)
  for s in string.gmatch(script,"[^\r\n]+") do -- for each line in the script
    if string.sub(s,1,#var) == var then -- if the beginning of the line matches var
      local n = string.match(s,"%d",#var) -- get the first number listed in that line after the var name
      return tonumber(n)
    end
  end
end

function onObjectLeaveScriptingZone(zone, object)
    if zone ~= getObjectFromGUID(zone_guid) then
        return
    elseif zone.getObjects()[1] == nil then
        val = 0
    elseif zone.getObjects()[1].tag == "Card" then
        val = zone.getObjects()[1].getVar("hp") or 0
    elseif zone.getObjects()[1].tag == "Deck" then
        local containedObjects = zone.getObjects()[1].getData().ContainedObjects
        local firstData = containedObjects[#containedObjects]
        local script = firstData["LuaScript"]
        val = findInScript(script, "hp") or 0
    else
        val = last_value
    end
    updateVal()
    updateSave()
end

function reset()
    objects = getObjectFromGUID(zone_guid).getObjects()
    if objects[1] == nil then
        val = 0
    elseif objects[1].tag == "Deck" then
       val = last_value
    else
        val = objects[1].getVar("hp") or 0
    end
    updateVal()
    updateSave()
end
MIN_VALUE = 0
MAX_VALUE = 9

function onload(saved_data)
    light_mode = false
    val = 0

    if saved_data ~= "" then
        local loaded_data = JSON.decode(saved_data)
        light_mode = loaded_data[1]
        val = loaded_data[2]
    end

    createAll()
end

function updateSave()
    local data_to_save = {light_mode, val}
    saved_data = JSON.encode(data_to_save)
    self.script_state = saved_data
end

function createAll()
    s_color = {0.5, 0.5, 0.5, 95}

    if light_mode then
        f_color = {1,1,1,95}
    else
        f_color = {0,0,0,100}
    end

    if self.getName() == "" then
        ttText = val
    else
        ttText = val .. "\n" .. self.getName()
    end

    self.createButton({
      label=tostring(val),
      click_function="add_subtract",
      tooltip=ttText,
      function_owner=self,
      position={0,0.05,-0.2},
      height=600,
      width=1000,
      alignment = 3,
      scale={x=1.5, y=1.5, z=1.5},
      font_size=600,
      font_color=f_color,
      color={0,0,0,0}
      })

    self.createInput({
        value = self.getName(),
        input_function = "editName",
        tooltip=ttText,
        label = "Counter",
        function_owner = self,
        alignment = 3,
        position = {0,0.05,1.5},
        width = 1200,
        height = 1000,
        font_size = 400,
        scale={x=1, y=1, z=1},
        font_color= f_color,
        color = {0,0,0,0}
        })


    if light_mode then
        lightButtonText = "[Set dark]"
    else
        lightButtonText = "[Set light]"
    end
    self.createButton({
        label=lightButtonText,
        tooltip=lightButtonText,
        click_function="swap_fcolor",
        function_owner=self,
        position={0,-0.05,0.6},
        rotation={180,180,0},
        height=250,
        width=1200,
        scale={x=1, y=1, z=1},
        font_size=250,
        font_color=s_color,
        color={0,0,0,0}
        })

    self.createInput({
        value = "#",
        label = "...",
        input_function = "keepSample",
        function_owner = self,
        alignment = 3,
        position={0,-0.05,-0.5},
        rotation={180,180,0},
        width = 600,
        height = 800,
        font_size = 1200,
        scale={x=1, y=1, z=1},
        font_color=f_color,
        color = {0,0,0,0}
        })

    setTooltips()
end

function removeAll()
    self.removeInput(0)
    self.removeInput(1)
    self.removeButton(0)
    self.removeButton(1)
end

function reloadAll()
    removeAll()
    createAll()
    setTooltips()
    updateSave()
end

function swap_fcolor(_obj, _color, alt_click)
    light_mode = not light_mode
    reloadAll()
end

function swap_align(_obj, _color, alt_click)
    center_mode = not center_mode
    reloadAll()
end

function editName(_obj, _string, value)
    self.setName(value)
    setTooltips()
end

function add_subtract(_obj, _color, alt_click)
    mod = alt_click and -1 or 1
    new_value = math.min(math.max(val + mod, MIN_VALUE), MAX_VALUE)
    if val ~= new_value then
        val = new_value
        updateVal()
        updateSave()
    end
end

function updateVal()
    if self.getName() == "" then
        ttText = val
    else
        ttText = val .. "\n" .. self.getName()
    end
    self.editButton({
        index = 0,
        label = tostring(val),
        tooltip = ttText
        })
end

function reset_val()
    val = 0
    updateVal()
    updateSave()
end

function setTooltips()
    self.editInput({
        index = 0,
        value = self.getName(),
        tooltip = ttText
        })
    self.editButton({
        index = 0,
        value = tostring(val),
        tooltip = ttText
        })
end

function null()
end

function keepSample(_obj, _string, value)
    reloadAll()
end

function onScriptingButtonDown(index, playerColor)
    if Player[playerColor].getHoverObject() == self then
        new_value = index
        if index == 10 then
            new_value = 0
        end
        if val ~= new_value then
            val = new_value
            updateVal()
            updateSave()
        end
    end
end
